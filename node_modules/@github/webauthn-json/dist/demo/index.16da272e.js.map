{"mappings":"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","sources":["./src/base64url.ts","./src/convert.ts","./src/basic/schema.ts","./src/basic/api.ts","./src/targets/demo/state.ts","./src/targets/demo/index.ts","./src/basic/supported.ts"],"sourcesContent":["export type Base64urlString = string;\n\nexport function base64urlToBuffer(\n  baseurl64String: Base64urlString,\n): ArrayBuffer {\n  // Base64url to Base64\n  const padding = \"==\".slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String =\n    baseurl64String.replace(/-/g, \"+\").replace(/_/g, \"/\") + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): Base64urlString {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = \"\";\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=/g, \"\");\n  return base64urlString;\n}\n","// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n\nimport { Schema } from \"./schema-format\";\n\n// TODO: Parcel isn't deduplicating these values.\nexport const copyValue = \"copy\";\nexport const convertValue = \"convert\";\n\nexport function convert<From, To>(\n  conversionFn: (v: From) => To,\n  schema: Schema,\n  input: any,\n): any {\n  if (schema === copyValue) {\n    return input;\n  }\n  if (schema === convertValue) {\n    return conversionFn(input);\n  }\n  if (schema instanceof Array) {\n    return input.map((v: any) => convert<From, To>(conversionFn, schema[0], v));\n  }\n  if (schema instanceof Object) {\n    const output: any = {};\n    for (const [key, schemaField] of Object.entries(schema)) {\n      if (!(key in input)) {\n        if (schemaField.required) {\n          throw new Error(`Missing key: ${key}`);\n        }\n        continue;\n      }\n      // Fields can be null (rather than missing or `undefined`), e.g. the\n      // `userHandle` field of the `AuthenticatorAssertionResponse`:\n      // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n      if (input[key] == null) {\n        output[key] = null;\n        continue;\n      }\n      output[key] = convert<From, To>(\n        conversionFn,\n        schemaField.schema,\n        input[key],\n      );\n    }\n    return output;\n  }\n}\n\nexport function required(schema: Schema): any {\n  return {\n    required: true,\n    schema,\n  };\n}\n\nexport function optional(schema: Schema): any {\n  return {\n    required: false,\n    schema,\n  };\n}\n","import { Schema } from \"../schema-format\";\nimport {\n  convertValue as convert,\n  copyValue as copy,\n  optional,\n  required,\n} from \"../convert\";\n\n// Shared by `create()` and `get()`.\n\nconst publicKeyCredentialDescriptorSchema: Schema = {\n  type: required(copy),\n  id: required(convert),\n  transports: optional(copy),\n};\n\nconst simplifiedExtensionsSchema: Schema = {\n  appid: optional(copy),\n  appidExclude: optional(copy),\n  credProps: optional(copy),\n};\n\nconst simplifiedClientExtensionResultsSchema = {\n  appid: optional(copy),\n  appidExclude: optional(copy),\n  credProps: optional(copy),\n};\n\n// `navigator.create()` request\n\nexport const credentialCreationOptions: Schema = {\n  publicKey: required({\n    rp: required(copy),\n    user: required({\n      id: required(convert),\n      name: required(copy),\n      displayName: required(copy),\n    }),\n\n    challenge: required(convert),\n    pubKeyCredParams: required(copy),\n\n    timeout: optional(copy),\n    excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    authenticatorSelection: optional(copy),\n    attestation: optional(copy),\n    extensions: optional(simplifiedExtensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.create()` response\n\nexport const publicKeyCredentialWithAttestation: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  response: required({\n    clientDataJSON: required(convert),\n    attestationObject: required(convert),\n  }),\n  clientExtensionResults: required(simplifiedClientExtensionResultsSchema),\n};\n\n// `navigator.get()` request\n\nexport const credentialRequestOptions: Schema = {\n  mediation: optional(copy),\n  publicKey: required({\n    challenge: required(convert),\n    timeout: optional(copy),\n    rpId: optional(copy),\n    allowCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    userVerification: optional(copy),\n    extensions: optional(simplifiedExtensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.get()` response\n\nexport const publicKeyCredentialWithAssertion: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  response: required({\n    clientDataJSON: required(convert),\n    authenticatorData: required(convert),\n    signature: required(convert),\n    userHandle: required(convert),\n  }),\n  clientExtensionResults: required(simplifiedClientExtensionResultsSchema),\n};\n\nexport const schema: { [s: string]: Schema } = {\n  credentialCreationOptions,\n  publicKeyCredentialWithAttestation,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n};\n","import { base64urlToBuffer, bufferToBase64url } from \"../base64url\";\nimport { convert } from \"../convert\";\nimport {\n  CredentialCreationOptionsJSON,\n  CredentialRequestOptionsJSON,\n  PublicKeyCredentialWithAssertionJSON,\n  PublicKeyCredentialWithAttestationJSON,\n  PublicKeyCredentialWithClientExtensionResults,\n} from \"./json\";\nimport {\n  credentialCreationOptions,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n  publicKeyCredentialWithAttestation,\n} from \"./schema\";\n\nexport function createRequestFromJSON(\n  requestJSON: CredentialCreationOptionsJSON,\n): CredentialCreationOptions {\n  return convert(base64urlToBuffer, credentialCreationOptions, requestJSON);\n}\n\nexport function createResponseToJSON(\n  credential: PublicKeyCredential,\n): PublicKeyCredentialWithAttestationJSON {\n  const credentialWithClientExtensionResults = credential as PublicKeyCredentialWithClientExtensionResults;\n  credentialWithClientExtensionResults.clientExtensionResults = credential.getClientExtensionResults();\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAttestation,\n    credentialWithClientExtensionResults,\n  );\n}\n\nexport async function create(\n  requestJSON: CredentialCreationOptionsJSON,\n): Promise<PublicKeyCredentialWithAttestationJSON> {\n  const credential = (await navigator.credentials.create(\n    createRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  return createResponseToJSON(credential);\n}\n\nexport function getRequestFromJSON(\n  requestJSON: CredentialRequestOptionsJSON,\n): CredentialRequestOptions {\n  return convert(base64urlToBuffer, credentialRequestOptions, requestJSON);\n}\n\nexport function getResponseToJSON(\n  credential: PublicKeyCredential,\n): PublicKeyCredentialWithAssertionJSON {\n  const credentialWithClientExtensionResults = credential as PublicKeyCredentialWithClientExtensionResults;\n  credentialWithClientExtensionResults.clientExtensionResults = credential.getClientExtensionResults();\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAssertion,\n    credentialWithClientExtensionResults,\n  );\n}\n\nexport async function get(\n  requestJSON: CredentialRequestOptionsJSON,\n): Promise<PublicKeyCredentialWithAssertionJSON> {\n  const credential = (await navigator.credentials.get(\n    getRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  return getResponseToJSON(credential);\n}\n\ndeclare global {\n  interface Window {\n    PublicKeyCredential: PublicKeyCredential | undefined;\n  }\n}\n","import { PublicKeyCredentialWithAttestationJSON } from \"../../basic/json\";\n\nexport function getRegistrations(): PublicKeyCredentialWithAttestationJSON[] {\n  const registrations = JSON.parse(\n    localStorage.webauthnExampleRegistrations || \"[]\",\n  );\n  return registrations;\n}\n\nexport function setRegistrations(\n  registrations: PublicKeyCredentialWithAttestationJSON[],\n  display: boolean = true,\n): void {\n  localStorage.webauthnExampleRegistrations = JSON.stringify(\n    registrations,\n    null,\n    \"  \",\n  );\n  displayRegistrations();\n}\n\nexport function saveRegistration(\n  registration: PublicKeyCredentialWithAttestationJSON,\n): void {\n  const registrations = getRegistrations();\n  registrations.push(registration);\n  setRegistrations(registrations);\n}\n\nfunction registrationElem(): HTMLTextAreaElement {\n  return document.querySelector(\"#registrations\")! as HTMLTextAreaElement;\n}\n\nexport function displayRegistrations() {\n  registrationElem().value = JSON.stringify(getRegistrations(), null, \"  \");\n}\n\nexport function withStatus(selector: string, fn: () => Promise<void>) {\n  return async function () {\n    document.querySelector(\"#error\")!.textContent = \"\";\n    document.querySelector(selector)!.textContent = \"…\";\n    try {\n      await fn();\n      document.querySelector(selector)!.textContent = \" ✅\";\n    } catch (e) {\n      document.querySelector(selector)!.textContent = \" ❌\";\n      console.error(e);\n      document.querySelector(\"#error\")!.textContent = e;\n    }\n  };\n}\n\nasync function saveInput(): Promise<void> {\n  document.querySelector(\"#error\")!.textContent = \"\";\n  registrationElem().style.backgroundColor = \"rgba(255, 127, 0, 0.5)\";\n  try {\n    setRegistrations(JSON.parse(registrationElem().value), false);\n    registrationElem().style.backgroundColor = \"rgba(0, 255, 0, 0.5)\";\n  } catch (e) {\n    registrationElem().style.backgroundColor = \"rgba(255, 0, 0, 0.5)\";\n    console.error(e);\n    document.querySelector(\"#error\")!.textContent = e;\n  }\n}\n\nwindow.addEventListener(\"load\", () => {\n  try {\n    displayRegistrations();\n    registrationElem().addEventListener(\"keyup\", saveInput);\n    registrationElem().addEventListener(\"change\", saveInput);\n    registrationElem().addEventListener(\"paste\", saveInput);\n  } catch (e) {\n    console.error(e);\n  }\n});\n","// A minimal example to test `webauthn-json`.\n// Note: do not hardcode values in production.\n\nimport { PublicKeyCredentialDescriptorJSON } from \"../../basic/json\";\nimport { create, get, supported } from \"../../index\";\nimport {\n  getRegistrations,\n  saveRegistration,\n  setRegistrations,\n  withStatus,\n} from \"./state\";\n\nfunction registeredCredentials(): PublicKeyCredentialDescriptorJSON[] {\n  return getRegistrations().map((reg) => ({\n    id: reg.rawId,\n    type: reg.type,\n  }));\n}\n\nasync function register(): Promise<void> {\n  saveRegistration(\n    await create({\n      publicKey: {\n        challenge: \"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\",\n        rp: { name: \"Localhost, Inc.\" },\n        user: {\n          id: \"IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\",\n          name: \"test_user\",\n          displayName: \"Test User\",\n        },\n        pubKeyCredParams: [{ type: \"public-key\", alg: -7 }],\n        excludeCredentials: registeredCredentials(),\n        authenticatorSelection: { userVerification: \"discouraged\" },\n        extensions: {\n          credProps: true,\n        },\n      },\n    }),\n  );\n}\n\nasync function authenticate(): Promise<void> {\n  await get({\n    publicKey: {\n      challenge: \"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\",\n      allowCredentials: registeredCredentials(),\n      userVerification: \"discouraged\",\n    },\n  });\n}\n\nasync function clear(): Promise<void> {\n  setRegistrations([]);\n}\n\nasync function testSupported() {\n  document.querySelector(\"#supported .status\")!.textContent = \"…\";\n  document.querySelector(\"#supported .status\")!.textContent = supported()\n    ? \" ✅\"\n    : \" ❌\";\n}\n\nwindow.addEventListener(\"load\", () => {\n  try {\n    document\n      .querySelector(\"#register\")!\n      .addEventListener(\"click\", withStatus(\"#register .status\", register));\n    document\n      .querySelector(\"#authenticate\")!\n      .addEventListener(\n        \"click\",\n        withStatus(\"#authenticate .status\", authenticate),\n      );\n    document\n      .querySelector(\"#clear\")!\n      .addEventListener(\"click\", withStatus(\"#clear .status\", clear));\n    document\n      .querySelector(\"#supported\")!\n      .addEventListener(\"click\", testSupported);\n  } catch (e) {\n    console.error(e);\n  }\n});\n","// This function does a simple check to test for the credential management API\n// functions we need, and an indication of public key credential authentication\n// support.\n// https://developers.google.com/web/updates/2018/03/webauthn-credential-management\n\nexport function supported(): boolean {\n  return !!(\n    navigator.credentials &&\n    navigator.credentials.create &&\n    navigator.credentials.get &&\n    window.PublicKeyCredential\n  );\n}\n"],"names":["base64urlToBuffer","baseurl64String","padding","slice","length","base64String","replace","str","atob","buffer","ArrayBuffer","byteView","Uint8Array","i","charCodeAt","bufferToBase64url","charCode","String","fromCharCode","btoa","copyValue","convertValue","convert","conversionFn","schema","input","Array","map","v","Object","output","key","schemaField","entries","required","Error","optional","publicKeyCredentialDescriptorSchema","type","$ca6bed55045a22b55a5c358b5a854ad7$export$required","$ca6bed55045a22b55a5c358b5a854ad7$export$copyValue","id","$ca6bed55045a22b55a5c358b5a854ad7$export$convertValue","transports","$ca6bed55045a22b55a5c358b5a854ad7$export$optional","simplifiedExtensionsSchema","appid","appidExclude","credProps","simplifiedClientExtensionResultsSchema","credentialCreationOptions","publicKey","rp","user","name","displayName","challenge","pubKeyCredParams","timeout","excludeCredentials","authenticatorSelection","attestation","extensions","signal","publicKeyCredentialWithAttestation","rawId","response","clientDataJSON","attestationObject","clientExtensionResults","credentialRequestOptions","mediation","rpId","allowCredentials","userVerification","publicKeyCredentialWithAssertion","authenticatorData","signature","userHandle","async","create","requestJSON","credential","credentialWithClientExtensionResults","getClientExtensionResults","$ca6bed55045a22b55a5c358b5a854ad7$export$convert","$c5385d3a0e16ed8d959d0cad493a9$export$bufferToBase64url","$ff71949d107593ee661f5df9818f5508$export$publicKeyCredentialWithAttestation","createResponseToJSON","navigator","credentials","$c5385d3a0e16ed8d959d0cad493a9$export$base64urlToBuffer","$ff71949d107593ee661f5df9818f5508$export$credentialCreationOptions","createRequestFromJSON","get","$ff71949d107593ee661f5df9818f5508$export$publicKeyCredentialWithAssertion","getResponseToJSON","$ff71949d107593ee661f5df9818f5508$export$credentialRequestOptions","getRequestFromJSON","getRegistrations","JSON","parse","localStorage","webauthnExampleRegistrations","setRegistrations","registrations","display","stringify","displayRegistrations","registrationElem","document","querySelector","value","withStatus","selector","fn","textContent","e","console","error","saveInput","style","backgroundColor","registeredCredentials","$af77fca101ca364b02ba384fd25eff$export$getRegistrations","reg","register","registration","push","$af77fca101ca364b02ba384fd25eff$export$saveRegistration","$ed7bc338ff0708fd64b5ecb2f34630$export$create","alg","authenticate","$ed7bc338ff0708fd64b5ecb2f34630$export$get","clear","$af77fca101ca364b02ba384fd25eff$export$setRegistrations","testSupported","window","PublicKeyCredential","addEventListener","$af77fca101ca364b02ba384fd25eff$export$withStatus"],"version":3,"file":"index.16da272e.js.map"}